stages:
- build-ci-image
- build
- test

variables:
  GIT_SUBMODULE_STRATEGY: recursive

ci build:
  stage: build-ci-image
  image:
    name: gcr.io/kaniko-project/executor:debug
    entrypoint: [""]
  script:
    - echo "{\"auths\":{\"${CI_REGISTRY}\":{\"auth\":\"$(printf "%s:%s" "${CI_REGISTRY_USER}" "${CI_REGISTRY_PASSWORD}" | base64 | tr -d '\n')\"},\"$CI_DEPENDENCY_PROXY_SERVER\":{\"auth\":\"$(printf "%s:%s" ${CI_DEPENDENCY_PROXY_USER} "${CI_DEPENDENCY_PROXY_PASSWORD}" | base64 | tr -d '\n')\"}}}" > /kaniko/.docker/config.json
    - /kaniko/executor --context $CI_PROJECT_DIR --dockerfile $CI_PROJECT_DIR/ci-build.Dockerfile --destination $CI_REGISTRY_IMAGE/ci-build:latest
  rules:
    - if: '$CI_COMMIT_BRANCH == "main"'
      changes:
        - ci-build.Dockerfile
        - .gitlab-ci.yml

build:
  stage: build
  image: $CI_REGISTRY_IMAGE/ci-build:latest
  before_script:
  - cmake -DCMAKE_TOOLCHAIN_FILE=./Tools/vcpkg/scripts/buildsystems/vcpkg.cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_EXPORT_COMPILE_COMMANDS=ON -DCMAKE_C_COMPILER=/usr/bin/gcc -DCMAKE_CXX_COMPILER=/usr/bin/g++ -DCMAKE_MAKE_PROGRAM=/usr/bin/ninja -S . -B ./Build/Release -G Ninja
  script:
  - cmake --build ./Build/Release --config Release --target all
  artifacts:
    paths:
    - ./Binaries
    expire_in: 1 day
  cache:
    paths:
    - ./Build/Release
    - ./Tools/vcpkg/packages
    policy: pull-push

ctest:
  stage: test
  image: $CI_REGISTRY_IMAGE/ci-build:latest
  variables:
    CMAKE_CTEST_ARGUMENTS: "--gtest_output=xml:./TestResults/ctest.xml"
  before_script:
  - cmake -DCMAKE_TOOLCHAIN_FILE=./Tools/vcpkg/scripts/buildsystems/vcpkg.cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_EXPORT_COMPILE_COMMANDS=ON -DCMAKE_C_COMPILER=/usr/bin/gcc -DCMAKE_CXX_COMPILER=/usr/bin/g++ -DCMAKE_MAKE_PROGRAM=/usr/bin/ninja -S . -B ./Build/Release -G Ninja
  script:
  - cd Build/Release
  - ctest --output-on-failure
  artifacts:
    when: always
    reports:
      junit: ./TestResults/ctest.xml
  cache:
    paths:
    - ./Build/Release
    - ./Tools/vcpkg/packages
    policy: pull

cppcheck:
  stage: test
  image: $CI_REGISTRY_IMAGE/ci-build:latest
  before_script:
  - cmake -DCMAKE_TOOLCHAIN_FILE=./Tools/vcpkg/scripts/buildsystems/vcpkg.cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_EXPORT_COMPILE_COMMANDS=ON -DCMAKE_C_COMPILER=/usr/bin/gcc -DCMAKE_CXX_COMPILER=/usr/bin/g++ -DCMAKE_MAKE_PROGRAM=/usr/bin/ninja -S . -B ./Build/Release -G Ninja
  script:
  - cmake --build ./Build/Release --config Release --target CppCheck
  cache:
    paths:
    - ./Build/Release
    - ./Tools/vcpkg/packages
    policy: pull

clang format:
  stage: test
  image: $CI_REGISTRY_IMAGE/ci-build:latest
  before_script:
  - cmake -DCMAKE_TOOLCHAIN_FILE=./Tools/vcpkg/scripts/buildsystems/vcpkg.cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_EXPORT_COMPILE_COMMANDS=ON -DCMAKE_C_COMPILER=/usr/bin/gcc -DCMAKE_CXX_COMPILER=/usr/bin/g++ -DCMAKE_MAKE_PROGRAM=/usr/bin/ninja -S . -B ./Build/Release -G Ninja
  script:
  - cmake --build ./Build/Release --config Release --target ClangFormatDryRun
  cache:
    paths:
    - ./Build/Release
    - ./Tools/vcpkg/packages
    policy: pull

clang check:
  stage: test
  image: $CI_REGISTRY_IMAGE/ci-build:latest
  before_script:
  - cmake -DCMAKE_TOOLCHAIN_FILE=./Tools/vcpkg/scripts/buildsystems/vcpkg.cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_EXPORT_COMPILE_COMMANDS=ON -DCMAKE_C_COMPILER=/usr/bin/gcc -DCMAKE_CXX_COMPILER=/usr/bin/g++ -DCMAKE_MAKE_PROGRAM=/usr/bin/ninja -S . -B ./Build/Release -G Ninja
  script:
  - cmake --build ./Build/Release --config Release --target ClangCheckDryRun
  cache:
    paths:
    - ./Build/Release
    - ./Tools/vcpkg/packages
    policy: pull
